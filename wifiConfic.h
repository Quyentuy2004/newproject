
#include <EEPROM.h> //T√™n wifi v√† m·∫≠t kh·∫©u l∆∞u v√†o √¥ nh·ªõ 0->96
#include <ArduinoJson.h>
#include <WiFi.h>
#include <WebServer.h> //WebServer: T·∫°o web server ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu HTTP.
#include <Ticker.h>//Ticker: T·∫°o c√°c t√°c v·ª• ƒë·ªãnh k·ª≥ (d√πng cho nh√°y LED).
#include "dodht22.h"//dodht22.h: Th∆∞ vi·ªán ri√™ng ƒë·ªÉ ƒë·ªçc c·∫£m bi·∫øn DHT22.


#include <HTTPClient.h>
String Web_App_URL = "https://script.google.com/macros/s/AKfycbwYjRgvJWVResLPTg9Q5l83GIDQe2DTmwUF17Zkaxaog1bjVR3zU_qkFiE-OQ8iAOs/exec";
//https://script.google.com/macros/s/AKfycbzz5DVJuy-aRHueeO1nFMzWUQ3wLT82HoNlxX7CY3b-mYG8xQueVal4YWoTO02axYY/exec
unsigned long currentTime=millis();
unsigned long currentTime2 = millis();
 float temp1 ;   
 float humi1 ;
float tempWar=35;



#define ledPin 2
#define btnPin 0
#define PUSHTIME 5000

WebServer webServer(80); //Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng webServer port 80


int wifiMode; // 0: Ch·∫ø ƒë·ªô c·∫•u h√¨nh web , 1: Ch·∫ø ƒë·ªô k·∫øt n·ªëi, 2: M·∫•t wifi
unsigned long blinkTime = millis();
int checklostwifi=0;//checklostwifi: N·∫øu m·∫•t Wi-Fi h∆°n 10 l·∫ßn th√¨ x√≥a EEPROM v√† reset.
unsigned long lastTimePress = millis();//lastTimePress: D√πng ki·ªÉm tra th·ªùi gian gi·ªØ n√∫t ƒë·ªÉ reset Wi-Fi.
Ticker blinker;
String ssid;// bi·∫øn to√†n c·ª•c l∆∞u th√¥ng tin ssid c·ªßa wifi
String password;//bi·∫øn to√†n c·ª•c l∆∞u th√¥ng tin password c·ªßa wifi
float h;
float t;
 
//T·∫°o bi·∫øn ch·ª©a m√£ ngu·ªìn trang web HTML ƒë·ªÉ hi·ªÉn th·ªã tr√¨nh hi·ªÉn th·ªã th√¥ng s·ªë Nhi·ªát ƒë·ªô v√† ƒê·ªô ·∫©m 
const char html1[] PROGMEM = R"html(
  <!DOCTYPE html>
  <html lang="vi">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESP32 IoT - Gi√°m s√°t Nhi·ªát ƒë·ªô v√† ƒê·ªô ·∫©m</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        .dashboard {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }
        .card {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
            flex: 1;
            min-width: 250px;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            color: #3498db;
            text-align: center;
        }
        .reading {
            font-size: 36px;
            font-weight: bold;
            text-align: center;
            margin: 20px 0;
        }
        .temperature {
            color: #e74c3c;
        }
        .humidity {
            color: #3498db;
        }
        .unit {
            font-size: 20px;
        }
        .simulated {
            text-align: center;
            margin-top: 10px;
            color: #7f8c8d;
            font-style: italic;
        }
        .sensor-icon {
            text-align: center;
            font-size: 24px;
            margin-bottom: 10px;
        }
        .section {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        .description {
            line-height: 1.6;
            margin-bottom: 20px;
        }
        .code-section {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
            overflow-x: auto;
        }
        pre {
            margin: 0;
            white-space: pre-wrap;
        }
        code {
            font-family: monospace;
            color: #333;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
  </head>
  <body>
    <div class="container">
        <h1>ESP32 IoT - Gi√°m s√°t Nhi·ªát ƒë·ªô v√† ƒê·ªô ·∫©m</h1>
        
        <div class="dashboard">
            <div class="card">
                <div class="sensor-icon">üå°Ô∏è</div>
                <div class="card-title">Nhi·ªát ƒë·ªô</div>
                <div class="reading temperature" id="temperature">%TEMP%<span class="unit">¬∞C</span></div>
            </div>
            
            <div class="card">
                <div class="sensor-icon">üíß</div>
                <div class="card-title">ƒê·ªô ·∫©m</div>
                <div class="reading humidity" id="humidity">%HUMI%<span class="unit">%</span></div>
            </div>
        </div>
        
        <div class="simulated">
            ƒê√¢y l√† m√¥ ph·ªèng giao di·ªán - d·ªØ li·ªáu th·∫≠t t·ª´ ESP32 s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã khi k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã.
        </div>
        
        <div class="section">
            <h2>M√¥ t·∫£ d·ª± √°n</h2>
            <div class="description">
                <p>D·ª± √°n n√†y s·ª≠ d·ª•ng ESP32 ƒë·ªÉ t·∫°o m·ªôt thi·∫øt b·ªã IoT ƒëo nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m. Thi·∫øt b·ªã c√≥ c√°c t√≠nh nƒÉng:</p>
                <ul>
                    <li>C·∫•u h√¨nh WiFi qua giao di·ªán web</li>
                    <li>ƒêo nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m s·ª≠ d·ª•ng c·∫£m bi·∫øn DHT11</li>
                    <li>Hi·ªÉn th·ªã d·ªØ li·ªáu theo th·ªùi gian th·ª±c tr√™n trang web</li>
                    <li>L∆∞u th√¥ng tin WiFi v√†o EEPROM ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi sau khi kh·ªüi ƒë·ªông l·∫°i</li>
                    <li>LED tr·∫°ng th√°i cho bi·∫øt ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông c·ªßa thi·∫øt b·ªã</li>
                </ul>
            </div>
        </div>
        
        <div class="section">
            <h2>Ch·ª©c nƒÉng ch√≠nh</h2>
            <div class="code-section">
                <pre><code>
  // Ch·∫ø ƒë·ªô Access Point
  - Khi kh·ªüi ƒë·ªông l·∫ßn ƒë·∫ßu, ESP32 s·∫Ω t·∫°o m·ªôt AP c√≥ t√™n "ESP32-xx"
  - K·∫øt n·ªëi ƒë·∫øn AP n√†y ƒë·ªÉ c·∫•u h√¨nh Wi-Fi nh√† b·∫°n
  - Truy c·∫≠p 192.168.4.1 ƒë·ªÉ nh·∫≠p SSID v√† m·∫≠t kh·∫©u Wi-Fi

  // Ch·∫ø ƒë·ªô ƒëo v√† hi·ªÉn th·ªã d·ªØ li·ªáu
  - Sau khi k·∫øt n·ªëi Wi-Fi th√†nh c√¥ng, ESP32 b·∫Øt ƒë·∫ßu ƒë·ªçc c·∫£m bi·∫øn
  - D·ªØ li·ªáu nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªói 2 gi√¢y
  - Truy c·∫≠p IP c·ªßa ESP32  ƒë·ªÉ xem d·ªØ li·ªáu

  // Kh√¥i ph·ª•c c√†i ƒë·∫∑t
  - Nh·∫•n gi·ªØ n√∫t RESET trong 5 gi√¢y ƒë·ªÉ x√≥a th√¥ng tin Wi-Fi
  - Thi·∫øt b·ªã s·∫Ω kh·ªüi ƒë·ªông l·∫°i ·ªü ch·∫ø ƒë·ªô Access Point
                </code></pre>
            </div>
        </div>
        
        <div class="footer">
            &copy; 2025 ESP32 IoT - Thi·∫øt b·ªã gi√°m s√°t nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m
        </div>
    </div>
    
    <script>
    // H√†m setInterval() l√† h√†m l·∫∑p l·∫°i trong 1 chu k·ª≥ th·ªùi gian
      setInterval(function ( ) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (xhttp.readyState == 4 && xhttp.status == 200) {
              document.getElementById("temperature").innerHTML = xhttp.responseText + "<span class='unit'>¬∞C</span>";
            }
        };
        xhttp.open("GET", "/temperature", true);
        xhttp.send();
      },2000 ) ;

      setInterval(function ( ) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (xhttp.readyState == 4 && xhttp.status == 200) {
           document.getElementById("humidity").innerHTML = xhttp.responseText + "<span class='unit'>%</span>";
          }
        };
        xhttp.open("GET", "/humidity", true);
        xhttp.send();
      }, 2000) ;
    </script>
 </body>
 </html>
)html";

//T·∫°o bi·∫øn ch·ª©a m√£ ngu·ªìn trang web HTML ƒë·ªÉ hi·ªÉn th·ªã tr√¨nh duy·ªát k·∫øt n·ªëi wifi b·∫±ng ch·∫ø ƒë·ªô AP
const char html[] PROGMEM = R"html( 
  <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>SETTING WIFI INFORMATION</title>
        <style type="text/css">
          body{display: flex;justify-content: center;align-items: center;}
          button{width: 135px;height: 40px;margin-top: 10px;border-radius: 5px}
          label, span{font-size: 25px;}
          input{margin-bottom: 10px;width:275px;height: 30px;font-size: 17px;}
          select{margin-bottom: 10px;width: 280px;height: 30px;font-size: 17px;}
        </style>
    </head>
    <body>
      <div>
        <h3 style="text-align: center;">SETTING WIFI INFORMATION</h3>
        <p id="info" style="text-align: center;">Scanning wifi network...!</p>
        <label>Wifi name:</label><br>
        <select id="ssid">
          <option>Choose wifi name!</option>
        </select><br>
        <label>Password:</label><br>
        <input id="password" type="text"><br>

        <button onclick="saveWifi()" style="background-color: cyan;margin-right: 10px">SAVE</button>
        <button onclick="reStart()" style="background-color: pink;">RESTART</button>
      </div>
        <script type="text/javascript">
          window.onload=function(){
            scanWifi();
          }
          var xhttp = new XMLHttpRequest();
          
          function scanWifi(){
            xhttp.onreadystatechange = function(){
              if (xhttp.readyState == 4) {
                console.log ("qua buoc 1");
                if (xhttp.status == 200) {
                  console.log("Th√†nh c√¥ng buoc 2:", xhttp.responseText);
                  data = xhttp.responseText; //xhttp.responseText ch·ª©a danh s√°ch SSID d∆∞·ªõi d·∫°ng chu·ªói JSON.
                  document.getElementById("info").innerHTML = "WiFi scan completed!";
                  var obj = JSON.parse(data);       //Chuy·ªÉn ƒë·ªïi JSON th√†nh object v·ªõi JSON.parse(data).  
                  var select = document.getElementById("ssid");
                  for(var i=0; i<obj.length;++i){
                   select[select.length] = new Option(obj[i],obj[i]);//
            
                  }
                }
                else if (xhttp.status == 404) {
                  console.error("L·ªói 404: T√†i nguy√™n kh√¥ng t√¨m th·∫•y!");
                  alert("L·ªói 404: Trang kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i URL.");
                }
                else {
                  console.error("L·ªói kh√°c: " + xhttp.status);
                }
              }
            }
            xhttp.open("GET","/scanWifi",true);
            xhttp.send();
          }
      
          function saveWifi(){
            ssid = document.getElementById("ssid").value;
            pass = document.getElementById("password").value;
            xhttp.onreadystatechange = function(){
              if(xhttp.readyState==4&&xhttp.status==200){
                data = xhttp.responseText;
                alert(data);
              }
            }
            xhttp.open("GET","/saveWifi?ssid="+ssid+"&pass="+pass,true);
            xhttp.send();
          }
          function reStart(){
             xhttp.onreadystatechange = function(){
              if(xhttp.readyState==4&&xhttp.status==200){
                data = xhttp.responseText;
                alert(data);
              }
            }
            xhttp.open("GET","/reStart",true);
            xhttp.send();
          }
        </script>
    </body>
  </html>
)html";

// H√†m qu√©t c√°c m·∫°ng Wi-Fi xung quanh v√† g·ª≠i danh s√°ch SSID v·ªÅ client d∆∞·ªõi d·∫°ng JSON
void scanWiFiNetworks() {
    Serial.println("Scanning WiFi..."); // In ra Serial ƒë·ªÉ b√°o b·∫Øt ƒë·∫ßu qu√©t Wi-Fi

    int numNetworks = WiFi.scanNetworks(); // Qu√©t v√† tr·∫£ v·ªÅ s·ªë m·∫°ng Wi-Fi t√¨m th·∫•y

    String json = "["; // Kh·ªüi t·∫°o chu·ªói JSON d·∫°ng m·∫£ng

    for (int i = 0; i < numNetworks; i++) {
        if (i) json += ","; // N·∫øu kh√¥ng ph·∫£i ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n th√¨ th√™m d·∫•u ph·∫©y ph√¢n c√°ch

        // Th√™m SSID c·ªßa m·∫°ng th·ª© i v√†o chu·ªói JSON, ƒë∆∞·ª£c ƒë·∫∑t trong d·∫•u ngo·∫∑c k√©p
        json += "\"" + WiFi.SSID(i) + "\"";
    }

    json += "]"; // K·∫øt th√∫c m·∫£ng JSON

    Serial.println(json); // In ra Serial chu·ªói JSON k·∫øt qu·∫£

    // G·ª≠i chu·ªói JSON v·ªÅ tr√¨nh duy·ªát v·ªõi m√£ HTTP 200 v√† ki·ªÉu n·ªôi dung l√† "application/json"
    webServer.send(200, "application/json", json);
}


// H√†m nh·∫•p nh√°y LED v·ªõi chu k·ª≥ t (ms)
// t: th·ªùi gian gi·ªØa hai l·∫ßn ƒë·ªïi tr·∫°ng th√°i LED (t√≠nh b·∫±ng mili gi√¢y)
void blinkLed(uint32_t t) {
  // Ki·ªÉm tra n·∫øu th·ªùi gian ƒë√£ tr√¥i qua l·ªõn h∆°n t k·ªÉ t·ª´ l·∫ßn nh√°y tr∆∞·ªõc
  if (millis() - blinkTime > t) {
    // ƒê·∫£o tr·∫°ng th√°i ch√¢n ledPin (n·∫øu ƒëang HIGH th√¨ chuy·ªÉn LOW v√† ng∆∞·ª£c l·∫°i)
    digitalWrite(ledPin, !digitalRead(ledPin));
    
    // C·∫≠p nh·∫≠t th·ªùi ƒëi·ªÉm nh√°y LED g·∫ßn nh·∫•t
    blinkTime = millis();
  }
}

// H√†m ƒëi·ªÅu khi·ªÉn nh√°y LED theo tr·∫°ng th√°i n√∫t nh·∫•n v√† ch·∫ø ƒë·ªô Wi-Fi
void ledControl() {
  // N·∫øu n√∫t ƒëang ƒë∆∞·ª£c nh·∫•n (LOW v√¨ n√∫t n·ªëi v·ªõi GND)
  if (digitalRead(btnPin) == LOW) {
    
    // Ki·ªÉm tra n·∫øu th·ªùi gian nh·∫•n ng·∫Øn h∆°n ng∆∞·ª°ng PUSHTIME
    if (millis() - lastTimePress < PUSHTIME) {
      // Nh√°y LED ch·∫≠m (1 gi√¢y) - bi·ªÉu th·ªã nh·∫•n ng·∫Øn
      blinkLed(1000);
    } else {
      // Nh√°y LED nhanh (50ms) - bi·ªÉu th·ªã nh·∫•n gi·ªØ l√¢u
      blinkLed(50);
    }

  } else {
    // N·∫øu kh√¥ng nh·∫•n n√∫t, LED s·∫Ω nh√°y theo ch·∫ø ƒë·ªô Wi-Fi hi·ªán t·∫°i

    if (wifiMode == 0) {
      // Ch·∫ø ƒë·ªô 0: AP mode ‚Äî nh√°y LED nhanh (50ms)
      blinkLed(50);

    } else if (wifiMode == 1) {
      // Ch·∫ø ƒë·ªô 1: STA ch∆∞a k·∫øt n·ªëi ‚Äî nh√°y LED ch·∫≠m (3 gi√¢y)
      blinkLed(3000);

    } else if (wifiMode == 2) {
      // Ch·∫ø ƒë·ªô 2: STA ƒë√£ k·∫øt n·ªëi ‚Äî nh√°y LED v·ª´a (300ms)
      blinkLed(300);
    }
  }
}

// H√†m x·ª≠ l√Ω c√°c s·ª± ki·ªán WiFi, t·ª± ƒë·ªông g·ªçi khi c√≥ s·ª± ki·ªán x·∫£y ra
void WiFiEvent(WiFiEvent_t event) {
   

    switch (event) {
        // S·ª± ki·ªán khi ESP32 ƒë√£ k·∫øt n·ªëi v·ªõi AP th√†nh c√¥ng (ch∆∞a l·∫•y IP)
        case ARDUINO_EVENT_WIFI_STA_CONNECTED:
            Serial.println("WiFi connected!");
             wifiMode = 0; 
            break;

        // S·ª± ki·ªán khi ESP32 b·ªã m·∫•t k·∫øt n·ªëi WiFi
        case ARDUINO_EVENT_WIFI_STA_DISCONNECTED:
            checklostwifi+=1;
                // N·∫øu s·ªë l·∫ßn m·∫•t k·∫øt n·ªëi < 10 l·∫ßn th√¨ th·ª≠ k·∫øt n·ªëi l·∫°i Wi-Fi
               if (checklostwifi==10){
                // Xo√° to√†n b·ªô v√πng nh·ªõ EEPROM (gi·∫£ s·ª≠ 100 byte ƒë∆∞·ª£c d√πng ƒë·ªÉ l∆∞u SSID, password,...)
      for (int i = 0; i < 100; i++) {
        EEPROM.write(i, 0);  // Ghi gi√° tr·ªã 0 v√†o t·ª´ng √¥ nh·ªõ
      }

      EEPROM.commit();  // L∆∞u thay ƒë·ªïi v√†o b·ªô nh·ªõ th·ª±c t·∫ø
      Serial.println("‚úÖ EEPROM memory erased!");

      delay(2000);       // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i
      ESP.restart();     // Kh·ªüi ƒë·ªông l·∫°i ESP32 ƒë·ªÉ v√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh Wi-Fi
                checklostwifi=0;
               }
                Serial.println("WiFi lost connection.");
                wifiMode = 2; // ƒê·∫∑t ch·∫ø ƒë·ªô Wi-Fi v·ªÅ 2 (ƒëang c·ªë g·∫Øng reconnect)
                       // ƒê·ª£i ng·∫Øt k·∫øt n·ªëi ho√†n t·∫•t
                WiFi.begin(ssid, password); // G·ªçi l·∫°i WiFi.begin ƒë·ªÉ k·∫øt n·ªëi l·∫°i
                
    

   
            
            break;

        // S·ª± ki·ªán khi ESP32 ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë·ªãa ch·ªâ IP t·ª´ Wi-Fi
        case ARDUINO_EVENT_WIFI_STA_GOT_IP:
            Serial.print("IP Address: ");
            Serial.println(WiFi.localIP()); // In ƒë·ªãa ch·ªâ IP ƒë√£ nh·∫≠n ƒë∆∞·ª£c ra Serial
            break;

        // M·∫∑c ƒë·ªãnh khi kh√¥ng kh·ªõp v·ªõi b·∫•t k·ª≥ s·ª± ki·ªán n√†o ·ªü tr√™n
        default:
            Serial.print("No ");
            break;
    }
}

void setupWifi(){
  

  // ƒêƒÉng k√Ω h√†m x·ª≠ l√Ω s·ª± ki·ªán WiFi, ch·ªâ c·∫ßn g·ªçi m·ªôt l·∫ßn duy nh·∫•t
  WiFi.onEvent(WiFiEvent); // H√†m WiFiEvent s·∫Ω ƒë∆∞·ª£c g·ªçi m·ªói khi c√≥ s·ª± ki·ªán WiFi x·∫£y ra

  // N·∫øu SSID h·ª£p l·ªá (ng∆∞·ªùi d√πng ƒë√£ c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥)
  if(ssid.length() > 0){
    Serial.println("Connecting to wifi...!");
    WiFi.mode(WIFI_STA);               // Chuy·ªÉn ESP32 sang ch·∫ø ƒë·ªô Station (k·∫øt n·ªëi WiFi)
    WiFi.begin(ssid, password);        // K·∫øt n·ªëi ƒë·∫øn WiFi v·ªõi SSID v√† m·∫≠t kh·∫©u ƒë√£ l∆∞u

    Serial.print("ƒêang k·∫øt n·ªëi t·ªõi WiFi");
    // V√≤ng l·∫∑p ch·ªù cho ƒë·∫øn khi k·∫øt n·ªëi th√†nh c√¥ng
    while (WiFi.status() != WL_CONNECTED) {
      Serial.print(".");
      delay(500);
    }

    Serial.println("\n‚úÖ ƒê√£ ho√†n th√†nh k·∫øt n·ªëi WiFi!");
    checklostwifi = 0;  // Reset b·ªô ƒë·∫øm m·∫•t k·∫øt n·ªëi
  } 
  else {
    // N·∫øu kh√¥ng c√≥ SSID trong EEPROM, kh·ªüi t·∫°o ch·∫ø ƒë·ªô Access Point ƒë·ªÉ ng∆∞·ªùi d√πng c·∫•u h√¨nh WiFi
    Serial.println("üöÄ ESP32 wifi network created!");
    WiFi.mode(WIFI_AP);  // Chuy·ªÉn sang ch·∫ø ƒë·ªô Access Point

    

    // T·∫°o t√™n SSID cho AP d·ª±a tr√™n 2 byte cu·ªëi c·ªßa ƒë·ªãa ch·ªâ MAC
    String ssid_ap = "ESP32" ;
    

    // Kh·ªüi ƒë·ªông Access Point v·ªõi SSID m·ªõi t·∫°o
    WiFi.softAP(ssid_ap.c_str());

    Serial.println("T√™n m·∫°ng Access Point: " + ssid_ap);
    Serial.println("Truy c·∫≠p Web Server t·∫°i ƒë·ªãa ch·ªâ: " + WiFi.softAPIP().toString());

    wifiMode = 0; // ƒê·∫∑t tr·∫°ng th√°i WiFi = 0 (ch·∫ø ƒë·ªô AP)
  }
}








// H√†m thi·∫øt l·∫≠p WebServer cho ESP32
void setupWebServer() {
  // N·∫øu ESP32 ƒëang k·∫øt n·ªëi Wi-Fi (ch·∫ø ƒë·ªô STA)
  if (WiFi.status() == WL_CONNECTED) {
    
    // Thi·∫øt l·∫≠p route "/" tr·∫£ v·ªÅ giao di·ªán gi√°m s√°t html1
    webServer.on("/", [] {
      webServer.send(200, "text/html", html1);
    });
      
      // Thi·∫øt l·∫≠p API ƒë·ªçc nhi·ªát ƒë·ªô t·ª´ DHT22, tr·∫£ v·ªÅ d·∫°ng text
      webServer.on("/temperature", HTTP_GET, [] {
        webServer.send(200, "text/plain", String(t));
      });

      // Thi·∫øt l·∫≠p API ƒë·ªçc ƒë·ªô ·∫©m t·ª´ DHT22, tr·∫£ v·ªÅ d·∫°ng text
      webServer.on("/humidity", HTTP_GET, [] {
        webServer.send(200, "text/plain", String(h));
      });
    

    delay(2000);  // Delay nh·∫π ƒë·ªÉ ·ªïn ƒë·ªãnh h·ªá th·ªëng
    Serial.println("‚úÖ Web server started (STA mode)");
  } 
  else {  // N·∫øu ch∆∞a k·∫øt n·ªëi Wi-Fi (ch·∫ø ƒë·ªô AP ƒë·ªÉ c·∫•u h√¨nh Wi-Fi)

    // Route "/" tr·∫£ v·ªÅ giao di·ªán c·∫•u h√¨nh Wi-Fi html
    webServer.on("/", [] {
      webServer.send(200, "text/html", html);
    });

    // Route "/scanWifi" g·ªçi h√†m qu√©t m·∫°ng Wi-Fi v√† tr·∫£ danh s√°ch SSID
    webServer.on("/scanWifi", scanWiFiNetworks);

    // Route "/reStart" ƒë·ªÉ kh·ªüi ƒë·ªông l·∫°i ESP32
    webServer.on("/reStart", [] {
      webServer.send(200, "text/plain", "Esp32 is restarting!");
      delay(3000);
      ESP.restart();  // Kh·ªüi ƒë·ªông l·∫°i
    });

    // Route "/saveWifi" l∆∞u SSID v√† m·∫≠t kh·∫©u v√†o EEPROM
    webServer.on("/saveWifi", []() {
       String ssid_temp = webServer.arg("ssid");
    String password_temp = webServer.arg("pass");
    Serial.println("SSID:"+ssid_temp);
    Serial.println("PASS:"+password_temp);
    EEPROM.writeString(0,ssid_temp);
    EEPROM.writeString(32,password_temp);
    EEPROM.commit();
    webServer.send(200,"text/plain","Wifi has been saved!");// Ki·ªÉm tra n·∫øu c√≥ ƒë·ªß th√¥ng tin t·ª´ ng∆∞·ªùi d√πng

    });
  }

  // Kh·ªüi ƒë·ªông WebServer
  webServer.begin();
}

// H√†m ki·ªÉm tra n√∫t nh·∫•n ƒë·ªÉ kh√¥i ph·ª•c c·∫•u h√¨nh Wi-Fi m·∫∑c ƒë·ªãnh n·∫øu gi·ªØ n√∫t ƒë·ªß l√¢u
void checkButton() {
  // Ki·ªÉm tra n·∫øu n√∫t ƒë∆∞·ª£c nh·∫•n (m·ª©c LOW do n√∫t k√©o xu·ªëng GND)
  if (digitalRead(btnPin) == LOW) {
    Serial.println("Press and hold for 5 seconds to reset to default!");

    // N·∫øu n√∫t ƒë∆∞·ª£c nh·∫•n li√™n t·ª•c qu√° th·ªùi gian ƒë·ªãnh nghƒ©a (PUSHTIME)
    if (millis() - lastTimePress > PUSHTIME) {
      // Xo√° to√†n b·ªô v√πng nh·ªõ EEPROM (gi·∫£ s·ª≠ 100 byte ƒë∆∞·ª£c d√πng ƒë·ªÉ l∆∞u SSID, password,...)
      for (int i = 0; i < 100; i++) {
        EEPROM.write(i, 0);  // Ghi gi√° tr·ªã 0 v√†o t·ª´ng √¥ nh·ªõ
      }

      EEPROM.commit();  // L∆∞u thay ƒë·ªïi v√†o b·ªô nh·ªõ th·ª±c t·∫ø
      Serial.println("‚úÖ EEPROM memory erased!");

      delay(2000);       // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i
      ESP.restart();     // Kh·ªüi ƒë·ªông l·∫°i ESP32 ƒë·ªÉ v√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh Wi-Fi
    }

    delay(1000);  // ƒê·ª£i th√™m 1 gi√¢y ƒë·ªÉ tr√°nh ƒë·ªçc nh·∫•n nhi·ªÅu l·∫ßn li√™n t·ª•c
  } else {
    // N·∫øu n√∫t kh√¥ng nh·∫•n, c·∫≠p nh·∫≠t th·ªùi gian cu·ªëi c√πng n√∫t ƒë∆∞·ª£c nh·∫£ ra
    lastTimePress = millis();
  }
}

void writeSheet(){
  String Send_Data_URL = Web_App_URL + "?sts=write";
  Send_Data_URL += "&temp=" + String(temp1);
  Send_Data_URL += "&humi=" + String(humi1);
  //Serial.println();
  //Serial.println("-------------");
 // Serial.println("Send data to Google Spreadsheet...");
 // Serial.print("URL : ");
  //Serial.println(Send_Data_URL);
  // Initialize HTTPClient as "http".
  HTTPClient http;

  // HTTP GET Request.
  http.begin(Send_Data_URL.c_str());
  http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);

  // Gets the HTTP status code.
  int httpCode = http.GET(); 
 // Serial.print("HTTP Status Code : ");
 // Serial.println(httpCode);

  // Getting response from google sheets.
  String payload;
  if (httpCode > 0) {
    payload = http.getString();
   // Serial.println("Payload : " + payload);    
  }
  
  http.end();
}
String dataForm(float value, int leng, int decimal){
  String str = String(value,decimal);
  if(str.length()<leng){
    int space = leng-str.length();
    for(int i=0;i<space;++i){
      str = " "+str;
    }
  }
  return str;
}



class Config{
public:
  void begin(){
    DHT22.begin();// c·∫•u h√¨nh dht22 
    pinMode(ledPin,OUTPUT);// c·∫•u h√¨nh led ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i Wifi
    pinMode(btnPin,INPUT_PULLUP);
    blinker.attach_ms(50, ledControl);
      EEPROM.begin(100);
    char ssid_temp[32], password_temp[64];
    EEPROM.readString(0,ssid_temp, sizeof(ssid_temp));
    EEPROM.readString(32,password_temp,sizeof(password_temp));
    ssid = String(ssid_temp);
    password = String(password_temp);

    setupWifi();// c·∫•u h√¨nh Wifi
    if(wifiMode==0) setupWebServer();
    delay(100);  // ƒê·ª£i WiFi kh·ªüi ƒë·ªông
  }
  void run(){
    checkButton();
    if(wifiMode==0)webServer.handleClient();
    if (WiFi.status() == WL_CONNECTED) {
     t = DHT22.runTemp();
     h = DHT22.runHum();
      temp1 = t;
      humi1 = h;
 if(millis()-currentTime2>180000){
    writeSheet();
    currentTime2=millis();
  }
  if ( t >= tempWar) {
      digitalWrite(LEDWAR, HIGH);
      digitalWrite(COIWAR, HIGH);
     // guiSMS.run();
    }
   else {
    digitalWrite(LEDWAR, LOW);
    digitalWrite(COIWAR, LOW);
   }
  }
  }
} wifiConfig;

